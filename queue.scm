#lang scheme
(require rnrs/mutable-pairs-6)


(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (empty?)
      (null? front-ptr))
    (define (insert! x)
      (let ((new-pair (cons x '())))
        (cond ((empty?)
               (set! front-ptr new-pair)
               (set! rear-ptr new-pair)
               dispatch)
              (else (set-cdr! rear-ptr new-pair)
                    (set! rear-ptr new-pair)
                    dispatch))))
    (define (delete!)
      (if (empty?)
          (display 'delete! "called with an empty queue")
          (begin (set! front-ptr (cdr front-ptr))
                 dispatch)))
    (define (dispatch m)
      (cond ((eq? m 'empty-queue?) (empty?))
            ((eq? m 'front-queue)
             (if (empty?)
                 (display 'front-queue "called with an empty queue")
                 (car front-ptr)))
            ((eq? m 'insert-queue!) insert!)
            ((eq? m 'delete-queue!) (delete!))
            (else (display 'make-queue "undefined operation" m))))
    dispatch))

(define q (make-queue))
(q 'empty-queue?) 
((q 'insert-queue!) 'a)
((q 'insert-queue!) 'b)
(q 'empty-queue?) 
(q 'front-queue)
(q 'delete-queue!)
(q 'front-queue) 
(q 'delete-queue!)
(q 'empty-queue?) 
(q 'front-queue) 
(q 'delete-queue!) 