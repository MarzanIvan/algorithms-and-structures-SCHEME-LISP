#lang scheme

(define (make-account balance password)
  (define (withdraw amount)
    (cond ((>= balance amount)
        (begin (set! balance (- balance amount))
               balance))))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch p m)
    (if (eq? p password)
        (cond ((eq? m 'withdraw) withdraw)
              ((eq? m 'deposit) deposit)
              (else (error 'make-account "unknown request" m)))
        (lambda (x) "Incorrect password")))
  dispatch)
#|
(define acc (make-account 100 'secret-password))
((acc 'secret-password 'withdraw) 40) => 60
((acc 'some-other-password 'deposit) 50) => "Incorrect password"|#

(define (security-make-account balance password)
  (define (withdraw amount)
    (cond ((>= balance amount)
        (begin (set! balance (- balance amount))
               balance))))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (let ((consecutive-wrong 0))
    (define (dispatch p m)
      (if (eq? p password)
          (cond ((eq? m 'withdraw) withdraw)
                ((eq? m 'deposit) deposit)
                (else (error 'security-make-account "unknown request" m)))
          (lambda (x)
            (set! consecutive-wrong (+ consecutive-wrong 1))
            (if (> consecutive-wrong 7)
                (call-the-cops)
                "Incorrect password"))))
    dispatch))

(define (call-the-cops) "Calling the cops!")


(define acc (security-make-account 'right 100))
((acc 'wrong 'withdraw) 100)
((acc 'wrong 'withdraw) 100)
((acc 'wrong 'withdraw) 100)
((acc 'wrong 'withdraw) 100)
((acc 'wrong 'withdraw) 100)
((acc 'wrong 'withdraw) 100)
((acc 'wrong 'withdraw) 100)
((acc 'wrong 'withdraw) 100)